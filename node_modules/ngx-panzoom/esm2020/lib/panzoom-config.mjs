import { BehaviorSubject } from 'rxjs';
export class PanZoomConfig {
    constructor(options) {
        this.zoomLevels = 5;
        this.neutralZoomLevel = 2;
        this.scalePerZoomLevel = 2.0;
        this.initialZoomLevel = this.neutralZoomLevel;
        this.friction = 10.0;
        this.haltSpeed = 100.0;
        this.initialPanX = 0;
        this.initialPanY = 0;
        this.keepInBounds = false;
        this.keepInBoundsDragPullback = 0.7;
        this.keepInBoundsRestoreForce = 0.5;
        this.panOnClickDrag = true;
        this.dragMouseButton = 'left'; // left, middle, right
        this.zoomButtonIncrement = 1.0;
        this.zoomOnDoubleClick = true;
        this.zoomOnMouseWheel = true;
        this.invertMouseWheel = false;
        this.zoomStepDuration = 0.2;
        this.zoomToFitZoomLevelFactor = 0.95;
        this.freeMouseWheel = true;
        this.freeMouseWheelFactor = 0.08;
        this.modelChanged = new BehaviorSubject({
            isPanning: null,
            zoomLevel: null,
            pan: {
                x: null,
                y: null
            }
        });
        this.api = new BehaviorSubject({
            model: null,
            config: null,
            changeZoomLevel: null,
            zoomIn: null,
            zoomOut: null,
            zoomToFit: null,
            getViewPosition: null,
            getModelPosition: null,
            resetView: null,
            panToPoint: null,
            panDelta: null,
            panDeltaPercent: null,
            panDeltaAbsolute: null,
            centerContent: null,
            centerX: null,
            centerY: null,
            centerTopLeft: null,
            centerTopRight: null,
            centerBottomLeft: null,
            centerBottomRight: null,
            updateContentDimensions: null,
            detectContentDimensions: null
        });
        this.acceleratePan = true;
        this.dynamicContentDimensions = false;
        if (options === undefined) {
            return;
        }
        if ('zoomLevels' in options) {
            this.zoomLevels = options.zoomLevels;
        }
        if ('neutralZoomLevel' in options) {
            this.neutralZoomLevel = options.neutralZoomLevel;
        }
        if ('scalePerZoomLevel' in options) {
            this.scalePerZoomLevel = options.scalePerZoomLevel;
        }
        if ('initialZoomLevel' in options) {
            this.initialZoomLevel = options.initialZoomLevel;
        }
        if ('friction' in options) {
            this.friction = options.friction;
        }
        if ('haltSpeed' in options) {
            this.haltSpeed = options.haltSpeed;
        }
        if ('initialPanX' in options) {
            this.initialPanX = options.initialPanX;
        }
        if ('initialPanY' in options) {
            this.initialPanY = options.initialPanY;
        }
        if ('initialZoomToFit' in options) {
            this.initialZoomToFit = options.initialZoomToFit;
        }
        if ('keepInBounds' in options) {
            this.keepInBounds = options.keepInBounds;
        }
        if ('keepInBoundsDragPullback' in options) {
            this.keepInBoundsDragPullback = options.keepInBoundsDragPullback;
        }
        if ('keepInBoundsRestoreForce' in options) {
            this.keepInBoundsRestoreForce = options.keepInBoundsRestoreForce;
        }
        if ('panOnClickDrag' in options) {
            this.panOnClickDrag = options.panOnClickDrag;
        }
        if ('dragMouseButton' in options) {
            this.dragMouseButton = options.dragMouseButton;
        }
        if ('zoomButtonIncrement' in options) {
            this.zoomButtonIncrement = options.zoomButtonIncrement;
        }
        if ('zoomOnDoubleClick' in options) {
            this.zoomOnDoubleClick = options.zoomOnDoubleClick;
        }
        if ('zoomOnMouseWheel' in options) {
            this.zoomOnMouseWheel = options.zoomOnMouseWheel;
        }
        if ('invertMouseWheel' in options) {
            this.invertMouseWheel = options.invertMouseWheel;
        }
        if ('zoomStepDuration' in options) {
            this.zoomStepDuration = options.zoomStepDuration;
        }
        if ('zoomToFitZoomLevelFactor' in options) {
            this.zoomToFitZoomLevelFactor = options.zoomToFitZoomLevelFactor;
        }
        if ('freeMouseWheel' in options) {
            this.freeMouseWheel = options.freeMouseWheel;
        }
        if ('freeMouseWheelFactor' in options) {
            this.freeMouseWheelFactor = options.freeMouseWheelFactor;
        }
        if (this.keepInBounds && this.neutralZoomLevel !== 0) {
            console.warn('You have set keepInBounds to true and neutralZoomLevel to ' + this.neutralZoomLevel + '. Be aware that the zoom level cannot go below ' + this.neutralZoomLevel);
        }
        if ('noDragFromElementClass' in options) {
            this.noDragFromElementClass = options.noDragFromElementClass;
        }
        if ('acceleratePan' in options) {
            this.acceleratePan = options.acceleratePan;
        }
        if ('dynamicContentDimensions' in options) {
            this.dynamicContentDimensions = options.dynamicContentDimensions;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,